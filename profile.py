"""Various VMs profile

Instructions:
    Wait for everything to start,
    Add ipv6 addresses (apparently there's no functionality here to do so),
    Do cool stuff!
"""

# Lists of desired specifications:
# the script generates one VM for each element in the product of these lists.
# Node names are generated by concatenating their coordinates in the product.
# If you want to generate more then 254 nodes or so, you will need to re-work the
# ip assignment below.

CORES = [1,2]
RAMS = [2048, 4096]

# Boiler plate
import geni.portal as portal
import geni.rspec.pg as rspec
request = portal.context.makeRequestRSpec()

#   # Set up a physical target
#   target1 = request.RawPC("target1")
#   target1.hardware_type = "m510"
#   # Manually add interface to ensure it has a constant IP address
#   target1iface = target1.addInterface("if1")
#   target1iface.component_id = "eth1"
#   target1iface.addAddress(rspec.IPv4Address("10.10.1.1","255.255.255.0"))


# Set up VMs with various properties
nodes = []
ifaces = []
ipCount = 2
for cores in CORES:
  for ram in RAMS:
    newNodeName = "node_c" + str(cores) + "_r" + str(ram)
    newNode = request.XenVM(newNodeName)
    newNode.cores = cores
    newNode.ram = ram
    newIface = newNode.addInterface("if1")
    newIface.component_id = "eth1"
    newIface.addAddress(rspec.IPv4Address("10.10.1."+str(ipCount),"255.255.255.0"))
    ipCount += 1
    nodes.append(newNode)
    ifaces.append(newIface)

# Link everything together
link = request.LAN("lan")
link.addInterface(target1iface)
for iface in ifaces:
  link.addInterface(iface)

# Boiler plate
portal.context.printRequestRSpec()
